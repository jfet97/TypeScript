//// [tests/cases/compiler/000.ts] ////

=== 000.ts ===
interface State<Type> {
>State : Symbol(State, Decl(000.ts, 0, 0))
>Type : Symbol(Type, Decl(000.ts, 0, 16))

  state: Type;
>state : Symbol(State.state, Decl(000.ts, 0, 23))
>Type : Symbol(Type, Decl(000.ts, 0, 16))
}

interface UserName {
>UserName : Symbol(UserName, Decl(000.ts, 2, 1))

  first: string;
>first : Symbol(UserName.first, Decl(000.ts, 4, 20))

  last?: string;
>last : Symbol(UserName.last, Decl(000.ts, 5, 16))
}


const nameState = {} as {
>nameState : Symbol(nameState, Decl(000.ts, 10, 5))

  value: string;
>value : Symbol(value, Decl(000.ts, 10, 25))

  state: State<string>;
>state : Symbol(state, Decl(000.ts, 11, 16))
>State : Symbol(State, Decl(000.ts, 0, 0))

} | {
  value: UserName;
>value : Symbol(value, Decl(000.ts, 13, 5))
>UserName : Symbol(UserName, Decl(000.ts, 2, 1))

  state: State<UserName>;
>state : Symbol(state, Decl(000.ts, 14, 18))
>State : Symbol(State, Decl(000.ts, 0, 0))
>UserName : Symbol(UserName, Decl(000.ts, 2, 1))
}

if (typeof nameState.value === "string") {
>nameState.value : Symbol(value, Decl(000.ts, 10, 25), Decl(000.ts, 13, 5))
>nameState : Symbol(nameState, Decl(000.ts, 10, 5))
>value : Symbol(value, Decl(000.ts, 10, 25), Decl(000.ts, 13, 5))

  nameState.state satisfies  State<string>;
>nameState.state : Symbol(state, Decl(000.ts, 11, 16))
>nameState : Symbol(nameState, Decl(000.ts, 10, 5))
>state : Symbol(state, Decl(000.ts, 11, 16))
>State : Symbol(State, Decl(000.ts, 0, 0))
}

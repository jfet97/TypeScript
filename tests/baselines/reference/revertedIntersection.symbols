//// [tests/cases/compiler/revertedIntersection.ts] ////

=== revertedIntersection.ts ===
type StateConfig<TAction extends string> = {
>StateConfig : Symbol(StateConfig, Decl(revertedIntersection.ts, 0, 0))
>TAction : Symbol(TAction, Decl(revertedIntersection.ts, 0, 17))

  entry?: TAction
>entry : Symbol(entry, Decl(revertedIntersection.ts, 0, 44))
>TAction : Symbol(TAction, Decl(revertedIntersection.ts, 0, 17))

  states?: Record<string, StateConfig<TAction>>;
>states : Symbol(states, Decl(revertedIntersection.ts, 1, 17))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
>StateConfig : Symbol(StateConfig, Decl(revertedIntersection.ts, 0, 0))
>TAction : Symbol(TAction, Decl(revertedIntersection.ts, 0, 17))

};

type StateSchema = {
>StateSchema : Symbol(StateSchema, Decl(revertedIntersection.ts, 3, 2))

  states?: Record<string, StateSchema>;
>states : Symbol(states, Decl(revertedIntersection.ts, 5, 20))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
>StateSchema : Symbol(StateSchema, Decl(revertedIntersection.ts, 3, 2))

};

declare function createMachine<
>createMachine : Symbol(createMachine, Decl(revertedIntersection.ts, 7, 2))

  TConfig extends StateConfig<TAction>,
>TConfig : Symbol(TConfig, Decl(revertedIntersection.ts, 9, 31))
>StateConfig : Symbol(StateConfig, Decl(revertedIntersection.ts, 0, 0))
>TAction : Symbol(TAction, Decl(revertedIntersection.ts, 10, 39))

  TAction extends string = TConfig["entry"] extends string ? TConfig["entry"] : string,
>TAction : Symbol(TAction, Decl(revertedIntersection.ts, 10, 39))
>TConfig : Symbol(TConfig, Decl(revertedIntersection.ts, 9, 31))
>TConfig : Symbol(TConfig, Decl(revertedIntersection.ts, 9, 31))

>(config: { [K in keyof TConfig & keyof StateConfig<TAction>]: TConfig[K] }): [TAction, TConfig];
>config : Symbol(config, Decl(revertedIntersection.ts, 12, 2))
>K : Symbol(K, Decl(revertedIntersection.ts, 12, 13))
>TConfig : Symbol(TConfig, Decl(revertedIntersection.ts, 9, 31))
>StateConfig : Symbol(StateConfig, Decl(revertedIntersection.ts, 0, 0))
>TAction : Symbol(TAction, Decl(revertedIntersection.ts, 10, 39))
>TConfig : Symbol(TConfig, Decl(revertedIntersection.ts, 9, 31))
>K : Symbol(K, Decl(revertedIntersection.ts, 12, 13))
>TAction : Symbol(TAction, Decl(revertedIntersection.ts, 10, 39))
>TConfig : Symbol(TConfig, Decl(revertedIntersection.ts, 9, 31))

const inferredParams1 = createMachine({
>inferredParams1 : Symbol(inferredParams1, Decl(revertedIntersection.ts, 14, 5))
>createMachine : Symbol(createMachine, Decl(revertedIntersection.ts, 7, 2))

  entry: "foo",
>entry : Symbol(entry, Decl(revertedIntersection.ts, 14, 39))

  states: {
>states : Symbol(states, Decl(revertedIntersection.ts, 15, 15))

    a: {
>a : Symbol(a, Decl(revertedIntersection.ts, 16, 11))

      entry: "bar",
>entry : Symbol(entry, Decl(revertedIntersection.ts, 17, 8))

    },
  },
  extra: 12,
>extra : Symbol(extra, Decl(revertedIntersection.ts, 20, 4))

});

const inferredParams2 = createMachine({
>inferredParams2 : Symbol(inferredParams2, Decl(revertedIntersection.ts, 24, 5))
>createMachine : Symbol(createMachine, Decl(revertedIntersection.ts, 7, 2))

  entry: "foo",
>entry : Symbol(entry, Decl(revertedIntersection.ts, 24, 39))

  states: {
>states : Symbol(states, Decl(revertedIntersection.ts, 25, 15))

    a: {
>a : Symbol(a, Decl(revertedIntersection.ts, 26, 11))

      entry: "foo",
>entry : Symbol(entry, Decl(revertedIntersection.ts, 27, 8))

    },
  },
  extra: 12,
>extra : Symbol(extra, Decl(revertedIntersection.ts, 30, 4))

});


// -----------------------------------------------------------------------------------------

const checkType = <T>() => <U extends T>(value: { [K in keyof U & keyof T]: U[K] }) => value;
>checkType : Symbol(checkType, Decl(revertedIntersection.ts, 37, 5))
>T : Symbol(T, Decl(revertedIntersection.ts, 37, 19))
>U : Symbol(U, Decl(revertedIntersection.ts, 37, 28))
>T : Symbol(T, Decl(revertedIntersection.ts, 37, 19))
>value : Symbol(value, Decl(revertedIntersection.ts, 37, 41))
>K : Symbol(K, Decl(revertedIntersection.ts, 37, 51))
>U : Symbol(U, Decl(revertedIntersection.ts, 37, 28))
>T : Symbol(T, Decl(revertedIntersection.ts, 37, 19))
>U : Symbol(U, Decl(revertedIntersection.ts, 37, 28))
>K : Symbol(K, Decl(revertedIntersection.ts, 37, 51))
>value : Symbol(value, Decl(revertedIntersection.ts, 37, 41))

const checked = checkType<{x: number, y: string}>()({
>checked : Symbol(checked, Decl(revertedIntersection.ts, 39, 5))
>checkType : Symbol(checkType, Decl(revertedIntersection.ts, 37, 5))
>x : Symbol(x, Decl(revertedIntersection.ts, 39, 27))
>y : Symbol(y, Decl(revertedIntersection.ts, 39, 37))

  x: 1 as number,
>x : Symbol(x, Decl(revertedIntersection.ts, 39, 53))

  y: "y",
>y : Symbol(y, Decl(revertedIntersection.ts, 40, 17))

  z: "z", // undesirable property z is *not* allowed
>z : Symbol(z, Decl(revertedIntersection.ts, 41, 9))

});

checked;
>checked : Symbol(checked, Decl(revertedIntersection.ts, 39, 5))

  // ^?

// -----------------------------------------------------------------------------------------

interface Stuff {
>Stuff : Symbol(Stuff, Decl(revertedIntersection.ts, 45, 8))

    field: number;
>field : Symbol(Stuff.field, Decl(revertedIntersection.ts, 50, 17))

    anotherField: string;
>anotherField : Symbol(Stuff.anotherField, Decl(revertedIntersection.ts, 51, 18))
}

declare function doStuffWithStuff<T extends Stuff>(arr: { [K in keyof T & keyof Stuff]: T[K] }[]): T
>doStuffWithStuff : Symbol(doStuffWithStuff, Decl(revertedIntersection.ts, 53, 1))
>T : Symbol(T, Decl(revertedIntersection.ts, 55, 34))
>Stuff : Symbol(Stuff, Decl(revertedIntersection.ts, 45, 8))
>arr : Symbol(arr, Decl(revertedIntersection.ts, 55, 51))
>K : Symbol(K, Decl(revertedIntersection.ts, 55, 59))
>T : Symbol(T, Decl(revertedIntersection.ts, 55, 34))
>Stuff : Symbol(Stuff, Decl(revertedIntersection.ts, 45, 8))
>T : Symbol(T, Decl(revertedIntersection.ts, 55, 34))
>K : Symbol(K, Decl(revertedIntersection.ts, 55, 59))
>T : Symbol(T, Decl(revertedIntersection.ts, 55, 34))

doStuffWithStuff([
>doStuffWithStuff : Symbol(doStuffWithStuff, Decl(revertedIntersection.ts, 53, 1))

    { field: 1, anotherField: 'a', extra: 123 },
>field : Symbol(field, Decl(revertedIntersection.ts, 58, 5))
>anotherField : Symbol(anotherField, Decl(revertedIntersection.ts, 58, 15))
>extra : Symbol(extra, Decl(revertedIntersection.ts, 58, 34))

])


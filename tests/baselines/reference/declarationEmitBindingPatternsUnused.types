//// [tests/cases/compiler/declarationEmitBindingPatternsUnused.ts] ////

=== declarationEmitBindingPatternsUnused.ts ===
type Named = { name: string }
>Named : { name: string; }
>name : string

function notReferenced({ name: alias }: Named) {
>notReferenced : ({ name: alias }: Named) => void
>name : any
>alias : string

}
function notReferencedNestedAlias({ p: { name: alias } }: { p: Named }) {
>notReferencedNestedAlias : ({ p: { name: alias } }: {    p: Named;}) => void
>p : any
>name : any
>alias : string
>p : Named
}
function notReferencedArrayAlias([a, b, { name: alias }]: Named[]) {
>notReferencedArrayAlias : ([a, b, { name: alias }]: Named[]) => void
>a : Named
>b : Named
>name : any
>alias : string
}



function referencedInCode({ name: alias }: Named) {
>referencedInCode : ({ name: alias }: Named) => string
>name : any
>alias : string

    return alias;
>alias : string
}

function referencedInSignarture({ name: alias }: Named): typeof alias {
>referencedInSignarture : ({ name: alias }: Named) => typeof alias
>name : any
>alias : string
>alias : string

    return alias;
>alias : string
}

function referencedInSignartureKeyword({ function: alias }: { function: string }): typeof alias {
>referencedInSignartureKeyword : ({ function: alias }: {    function: string;}) => typeof alias
>function : any
>alias : string
>function : string
>alias : string

    return null!;
>null! : null
}

function referencedInInferredType({ name: alias }: Named) {
>referencedInInferredType : ({ name: alias }: Named) => { name: typeof alias; }
>name : any
>alias : string

    type Named2 = { name: typeof alias }
>Named2 : { name: typeof alias; }
>name : string
>alias : string

    return null! as Named2
>null! as Named2 : { name: string; }
>null! : null
}

function referencedInNestedFunction({ name: alias }: Named) {
>referencedInNestedFunction : ({ name: alias }: Named) => (p: typeof alias) => void
>name : any
>alias : string

    return function(p: typeof alias) {
>function(p: typeof alias) {    } : (p: typeof alias) => void
>p : string
>alias : string

    }
}

function referencedNestedAlias({ p: { name: alias } }: { p: Named }): typeof alias {
>referencedNestedAlias : ({ p: { name: alias } }: {    p: Named;}) => typeof alias
>p : any
>name : any
>alias : string
>p : Named
>alias : string

	return alias;
>alias : string
}

function referencedArrayAlias([a, b, { name: alias }]: Named[]): typeof alias {
>referencedArrayAlias : ([a, b, { name: alias }]: Named[]) => typeof alias
>a : Named
>b : Named
>name : any
>alias : string
>alias : string

	return alias;
>alias : string
}


class NotReferencedClass {
>NotReferencedClass : NotReferencedClass

	constructor({ name: alias }: Named) {
>name : any
>alias : string
	}
	set x({ name: alias }: Named) {
>x : Named
>name : any
>alias : string

        console.log(alias);
>console.log(alias) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>alias : string
    }
	m({ name: alias }: Named) {
>m : ({ name: alias }: Named) => void
>name : any
>alias : string

        console.log(alias);
>console.log(alias) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>alias : string
    }
}

class ReferencedInCodeClas {
>ReferencedInCodeClas : ReferencedInCodeClas

	constructor({ name: alias }: Named) {
>name : any
>alias : string

		console.log(alias);
>console.log(alias) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>alias : string
	}
	set x({ name: alias }: Named) {
>x : Named
>name : any
>alias : string

        console.log(alias);
>console.log(alias) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>alias : string
    }
	m({ name: alias }: Named) {
>m : ({ name: alias }: Named) => void
>name : any
>alias : string

        console.log(alias);
>console.log(alias) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>alias : string
    }
}

class ReferencedInSignartureClass {
>ReferencedInSignartureClass : ReferencedInSignartureClass

	constructor({ name: alias }: Named, p: typeof alias) {
>name : any
>alias : string
>p : string
>alias : string

		console.log(alias);
>console.log(alias) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>alias : string
	}
	set x({ name: alias }: Named & { o: typeof alias }) {
>x : Named & { o: typeof alias; }
>name : any
>alias : string
>o : string
>alias : string
        
    }
	mReturnType({ name: alias }: Named): typeof alias {
>mReturnType : ({ name: alias }: Named) => typeof alias
>name : any
>alias : string
>alias : string

        return null!
>null! : null
    }
	mRerturnTypeNested({ name: alias }: Named): NonNullable<typeof alias> {
>mRerturnTypeNested : ({ name: alias }: Named) => NonNullable<typeof alias>
>name : any
>alias : string
>alias : string

        return null!
>null! : null
    }
    mParameter({ name: alias }: Named, p: typeof alias) {
>mParameter : ({ name: alias }: Named, p: typeof alias) => any
>name : any
>alias : string
>p : string
>alias : string

        return null!
>null! : null
    }
}

let notReferencedFnType: ({ name: alias }: Named) => void;
>notReferencedFnType : ({ name: alias }: Named) => void
>name : any
>alias : string

let referencedInSignartureReturnTypeFnType: ({ name: alias }: Named) => typeof alias;
>referencedInSignartureReturnTypeFnType : ({ name: alias }: Named) => string
>name : any
>alias : string
>alias : string

let referencedInSignartureParamTypeFnType: ({ name: alias }: Named, p: typeof alias) => void;
>referencedInSignartureParamTypeFnType : ({ name: alias }: Named, p: string) => void
>name : any
>alias : string
>p : string
>alias : string

let notReferencedCtorType: new ({ name: alias }: Named) => void;
>notReferencedCtorType : new ({ name: alias }: Named) => void
>name : any
>alias : string

let referencedInSignartureReturnTypeCtorType: new ({ name: alias }: Named) => typeof alias;
>referencedInSignartureReturnTypeCtorType : new ({ name: alias }: Named) => string
>name : any
>alias : string
>alias : string

let referencedInSignartureParamTypeCtorType: new  ({ name: alias }: Named, p: typeof alias) => void;
>referencedInSignartureParamTypeCtorType : new ({ name: alias }: Named, p: string) => void
>name : any
>alias : string
>p : string
>alias : string


interface NotReferencedInterface {
	({ name: alias }: Named): void
>name : any
>alias : string

	new ({ name: alias }: Named): void
>name : any
>alias : string

	set x({ name: alias }: Named);
>x : Named
>name : any
>alias : string

	m({ name: alias }: Named);
>m : ({ name: alias }: Named) => any
>name : any
>alias : string
}

interface ReferencedInSignartureInterface {
	({ name: alias }: Named, p: typeof alias): void
>name : any
>alias : string
>p : string
>alias : string

	({ name: alias }: Named): typeof alias
>name : any
>alias : string
>alias : string
	
	new ({ name: alias }: Named, p: typeof alias): void
>name : any
>alias : string
>p : string
>alias : string

	new ({ name: alias }: Named): typeof alias
>name : any
>alias : string
>alias : string

	set x({ name: alias }: Named & { o: typeof alias })
>x : Named & { o: typeof alias; }
>name : any
>alias : string
>o : string
>alias : string

	mReturnType({ name: alias }: Named): typeof alias;
>mReturnType : ({ name: alias }: Named) => typeof alias
>name : any
>alias : string
>alias : string

	mRerturnTypeNested({ name: alias }: Named): NonNullable<typeof alias>;
>mRerturnTypeNested : ({ name: alias }: Named) => NonNullable<typeof alias>
>name : any
>alias : string
>alias : string

    mParameter({ name: alias }: Named, p: typeof alias);
>mParameter : ({ name: alias }: Named, p: typeof alias) => any
>name : any
>alias : string
>p : string
>alias : string
}

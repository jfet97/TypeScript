//// [tests/cases/compiler/000.ts] ////

=== 000.ts ===
interface Test {
  a: number,
>a : number

  b: string,
>b : string

  c: boolean
>c : boolean
}

revert({ a: 1, b: '2', c: true, extra: 35 })
>revert({ a: 1, b: '2', c: true, extra: 35 }) : { a: 1; b: "2"; c: true; extra: number; }
>revert : <const T extends Test>(t: { [P in keyof T & keyof Test]: T[P]; }) => T
>{ a: 1, b: '2', c: true, extra: 35 } : { a: 1; b: "2"; c: true; extra: number; }
>a : 1
>1 : 1
>b : "2"
>'2' : "2"
>c : true
>true : true
>extra : number
>35 : 35


declare function revert<const T extends Test>(t: { [P in keyof T & keyof Test]: T[P] }): T
>revert : <const T extends Test>(t: { [P in keyof T & keyof Test]: T[P]; }) => T
>t : { [P in keyof T & keyof Test]: T[P]; }


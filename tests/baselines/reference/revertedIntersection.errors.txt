revertedIntersection.ts(19,7): error TS2322: Type '"bar"' is not assignable to type '"foo"'.
revertedIntersection.ts(32,3): error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ entry: "foo"; states: { a: { entry: "foo"; }; }; }'.
revertedIntersection.ts(43,3): error TS2353: Object literal may only specify known properties, and 'z' does not exist in type '{ x: number; y: "y"; }'.


==== revertedIntersection.ts (3 errors) ====
    type StateConfig<TAction extends string> = {
      entry?: TAction
      states?: Record<string, StateConfig<TAction>>;
    };
    
    type StateSchema = {
      states?: Record<string, StateSchema>;
    };
    
    declare function createMachine<
      TConfig extends StateConfig<TAction>,
      TAction extends string = TConfig["entry"] extends string ? TConfig["entry"] : string,
    >(config: { [K in keyof TConfig & keyof StateConfig<TAction>]: TConfig[K] }): [TAction, TConfig];
    
    const inferredParams1 = createMachine({
      entry: "foo",
      states: {
        a: {
          entry: "bar",
          ~~~~~
!!! error TS2322: Type '"bar"' is not assignable to type '"foo"'.
!!! related TS6500 revertedIntersection.ts:2:3: The expected type comes from property 'entry' which is declared here on type 'StateConfig<"foo">'
        },
      },
      extra: 12,
    });
    
    const inferredParams2 = createMachine({
      entry: "foo",
      states: {
        a: {
          entry: "foo",
        },
      },
      extra: 12,
      ~~~~~
!!! error TS2353: Object literal may only specify known properties, and 'extra' does not exist in type '{ entry: "foo"; states: { a: { entry: "foo"; }; }; }'.
    });
    
    
    // -----------------------------------------------------------------------------------------
    
    const checkType = <T>() => <U extends T>(value: { [K in keyof U & keyof T]: U[K]}) => value;
    
    const checked = checkType<{x: number, y: string}>()({
      x: 1 as number,
      y: "y",
      z: "z", // undesirable property z is *not* allowed
      ~
!!! error TS2353: Object literal may only specify known properties, and 'z' does not exist in type '{ x: number; y: "y"; }'.
    });
    
     checked;
      // ^?